import { ref, onMounted } from 'vue'

export function useTelegramSDK() {
  const isWebAppAvailable = ref(false)
  const webApp = ref(null)
  const initData = ref('')
  const user = ref(null)
  const isReady = ref(false)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  const initWebApp = () => {
    try {
      console.log('üöÄ Initializing Telegram WebApp with official SDK...')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp
      if (!window.Telegram || !window.Telegram.WebApp) {
        console.error('‚ùå Telegram WebApp not available')
        return false
      }

      const webapp = window.Telegram.WebApp
      webApp.value = webapp
      isWebAppAvailable.value = true

      console.log('‚úÖ Telegram WebApp available')
      console.log('üì± Version:', webapp.version)
      console.log('üì± Platform:', webapp.platform)

      // –ü–æ–ª—É—á–∞–µ–º initData
      if (webapp.initData && webapp.initData.length > 0) {
        initData.value = webapp.initData
        console.log('‚úÖ initData received:', webapp.initData.substring(0, 50) + '...')
        
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (webapp.initDataUnsafe && webapp.initDataUnsafe.user) {
          user.value = webapp.initDataUnsafe.user
          console.log('‚úÖ User data parsed:', user.value)
        } else {
          // –ü—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥
          try {
            const params = new URLSearchParams(webapp.initData)
            const userParam = params.get('user')
            
            if (userParam) {
              user.value = JSON.parse(userParam)
              console.log('‚úÖ User data parsed manually:', user.value)
            }
          } catch (error) {
            console.error('‚ùå Failed to parse user data:', error)
          }
        }
      } else {
        console.warn('‚ö†Ô∏è No initData available')
        return false
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp
      if (typeof webapp.ready === 'function') {
        webapp.ready()
        console.log('üì± WebApp.ready() called')
      }

      if (typeof webapp.expand === 'function') {
        webapp.expand()
        console.log('üì± WebApp.expand() called')
      }

      isReady.value = true
      return true

    } catch (error) {
      console.error('‚ùå Error initializing Telegram WebApp:', error)
      return false
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  const isValidEnvironment = () => {
    if (!isWebAppAvailable.value) {
      return {
        isValid: false,
        error: 'TELEGRAM_NOT_AVAILABLE',
        message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ Telegram –∫–ª–∏–µ–Ω—Ç–∞'
      }
    }

    if (!initData.value || initData.value.length === 0) {
      return {
        isValid: false,
        error: 'INIT_DATA_MISSING',
        message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram'
      }
    }

    if (!user.value || !user.value.id) {
      return {
        isValid: false,
        error: 'USER_DATA_MISSING',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram'
      }
    }

    return { isValid: true }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserData = () => {
    const validation = isValidEnvironment()
    if (!validation.isValid) {
      throw new Error(validation.message)
    }

    return {
      id: user.value.id,
      first_name: user.value.first_name || '',
      last_name: user.value.last_name || '',
      username: user.value.username || '',
      language_code: user.value.language_code || 'ru',
      is_premium: user.value.is_premium || false,
      photo_url: user.value.photo_url || null,
      allows_write_to_pm: user.value.allows_write_to_pm || false
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ raw initData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const getRawInitData = () => {
    const validation = isValidEnvironment()
    if (!validation.isValid) {
      throw new Error(validation.message)
    }

    return initData.value
  }

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const showAlert = (message) => {
    try {
      console.log('üì± showAlert called with message:', message)
      
      const webapp = webApp.value
      if (webapp && typeof webapp.showAlert === 'function') {
        console.log('üì± Using Telegram showAlert')
        webapp.showAlert(message)
        return
      }
      
      console.log('üì± Telegram showAlert not available, using browser alert')
      alert(message)
    } catch (error) {
      console.warn('showAlert error:', error)
      alert(message)
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const close = () => {
    if (webApp.value && typeof webApp.value.close === 'function') {
      webApp.value.close()
    } else {
      if (window.history.length > 1) {
        window.history.back()
      } else {
        window.close()
      }
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ Telegram —Å—Å—ã–ª–∫–∏
  const openTelegramLink = (url) => {
    if (webApp.value && typeof webApp.value.openTelegramLink === 'function') {
      webApp.value.openTelegramLink(url)
    } else {
      window.open(url, '_blank')
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  onMounted(() => {
    console.log('üöÄ useTelegramSDK mounted - initializing...')
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
    setTimeout(() => {
      initWebApp()
    }, 100)
  })

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isWebAppAvailable,
    webApp,
    initData,
    user,
    isReady,
    
    // –ú–µ—Ç–æ–¥—ã
    initWebApp,
    isValidEnvironment,
    getUserData,
    getRawInitData,
    showAlert,
    close,
    openTelegramLink
  }
} 