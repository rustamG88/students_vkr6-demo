#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üöÄ Setting up project for Railway deployment...\n');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'package.json',
  'server.js',
  'app.js',
  'database/db.js'
];

console.log('üìã Checking required files...');
for (const file of requiredFiles) {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MISSING!`);
    process.exit(1);
  }
}

// 2. –°–æ–∑–¥–∞–µ–º .railwayignore –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const railwayIgnore = `# Railway ignore file
node_modules/
.env*
.git/
*.log
coverage/
test-results/
playwright-report/
uploads/
mysql_data/
docker-compose.yml
Dockerfile
.dockerignore
ngrok*
tunnels.json
*.tmp
*.temp
.DS_Store
Thumbs.db
`;

if (!fs.existsSync('.railwayignore')) {
  fs.writeFileSync('.railwayignore', railwayIgnore);
  console.log('‚úÖ Created .railwayignore');
} else {
  console.log('‚úÖ .railwayignore already exists');
}

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json scripts
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));

if (!packageJson.scripts.start) {
  console.log('‚ùå Missing "start" script in package.json');
  process.exit(1);
}

if (!packageJson.scripts['db:init']) {
  console.log('‚ö†Ô∏è Missing "db:init" script - adding it...');
  packageJson.scripts['db:init'] = 'node database/init-db.js';
  fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
}

console.log('‚úÖ Package.json scripts are ready');

// 4. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envInstructions = `
üîß RAILWAY ENVIRONMENT VARIABLES SETUP
=====================================

–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Railway, –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "Variables":

üìä DATABASE (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ Railway MySQL service):
DB_HOST=containers-us-west-xxx.railway.app
DB_PORT=6543
DB_NAME=railway
DB_USER=root
DB_PASSWORD=<generated_password>

üîê SECURITY:
JWT_SECRET=<generate_random_32_char_string>
NODE_ENV=production

ü§ñ TELEGRAM:
TELEGRAM_BOT_TOKEN=<your_bot_token_from_botfather>

üåê FRONTEND:
FRONTEND_URL=https://<your-app-name>.up.railway.app

‚ö° OPTIONAL:
PORT=3000
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
MAX_FILE_SIZE=5242880

üìù STEPS AFTER DEPLOYMENT:
1. Go to Railway Dashboard
2. Find your app URL (e.g., https://your-app.up.railway.app)
3. Open @BotFather in Telegram
4. Run: /setdomain
5. Select your bot
6. Enter: your-app.up.railway.app (without https://)
7. Test your bot!

üîß DATABASE INITIALIZATION:
After first deployment, run in Railway console:
npm run db:init
`;

fs.writeFileSync('RAILWAY_ENV_SETUP.txt', envInstructions);
console.log('‚úÖ Created RAILWAY_ENV_SETUP.txt with instructions');

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = fs.readFileSync('database/db.js', 'utf8');
if (!dbConfig.includes('ssl:') || !dbConfig.includes('NODE_ENV')) {
  console.log('‚ö†Ô∏è Database config might need SSL settings for Railway');
  console.log('   Check database/db.js for SSL configuration');
}

console.log('\nüéâ Railway setup completed!');
console.log('\nüìã NEXT STEPS:');
console.log('1. Commit all changes to Git');
console.log('2. Push to GitHub');
console.log('3. Go to railway.app');
console.log('4. Create new project from GitHub repo');
console.log('5. Add MySQL database service');
console.log('6. Configure environment variables (see RAILWAY_ENV_SETUP.txt)');
console.log('7. Deploy and test!');
console.log('\nüìñ Full instructions: see RAILWAY_DEPLOY.md'); 