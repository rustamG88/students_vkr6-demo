const fs = require('fs').promises;
const path = require('path');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const DB_PATH = path.join(__dirname, 'json-data');

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbFiles = {
  users: 'users.json',
  teams: 'teams.json',
  tasks: 'tasks.json',
  task_statuses: 'task_statuses.json',
  task_priorities: 'task_priorities.json',
  employee_notes: 'employee_notes.json'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initializeDatabase = async () => {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.mkdir(DB_PATH, { recursive: true });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for (const [table, filename] of Object.entries(dbFiles)) {
      const filepath = path.join(DB_PATH, filename);
      
      try {
        await fs.access(filepath);
        console.log(`‚úÖ ${table} database file exists`);
      } catch (error) {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const initialData = getInitialData(table);
        await fs.writeFile(filepath, JSON.stringify(initialData, null, 2));
        console.log(`‚úÖ Created ${table} database file`);
      }
    }
    
    console.log('üóÑÔ∏è JSON Database initialized successfully');
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    throw error;
  }
};

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
const getInitialData = (table) => {
  switch (table) {
    case 'users':
      return [];
    case 'teams':
      return [];
    case 'tasks':
      return [];
    case 'task_statuses':
      return [
        { id: 0, name: '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞', color: '#8E8E93', description: '–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω' },
        { id: 1, name: '–û–∂–∏–¥–∞–µ—Ç', color: '#FF9500', description: '–ó–∞–¥–∞—á–∞ –æ–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' },
        { id: 2, name: '–í —Ä–∞–±–æ—Ç–µ', color: '#007AFF', description: '–ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' },
        { id: 3, name: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', color: '#5856D6', description: '–ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' },
        { id: 4, name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', color: '#34C759', description: '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' },
        { id: 5, name: '–û—Ç–º–µ–Ω–µ–Ω–æ', color: '#FF3B30', description: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ' }
      ];
    case 'task_priorities':
      return [
        { id: 0, name: '–ë–µ–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞', color: '#8E8E93', level: 0, description: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω' },
        { id: 1, name: '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', color: '#34C759', level: 1, description: '–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è' },
        { id: 2, name: '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', color: '#FF9500', level: 2, description: '–¢—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ–±—ã—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ' },
        { id: 3, name: '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', color: '#FF3B30', level: 3, description: '–¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è' }
      ];
    case 'employee_notes':
      return [];
    default:
      return [];
  }
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON —Ñ–∞–π–ª–∞–º–∏
class JsonDatabase {
  constructor() {
    this.nextIds = {}; // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö ID –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
  }

  async readTable(tableName) {
    try {
      const filepath = path.join(DB_PATH, dbFiles[tableName]);
      const data = await fs.readFile(filepath, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      console.error(`Error reading ${tableName}:`, error);
      return [];
    }
  }

  async writeTable(tableName, data) {
    try {
      const filepath = path.join(DB_PATH, dbFiles[tableName]);
      await fs.writeFile(filepath, JSON.stringify(data, null, 2));
      return true;
    } catch (error) {
      console.error(`Error writing ${tableName}:`, error);
      return false;
    }
  }

  async getNextId(tableName) {
    if (!this.nextIds[tableName]) {
      const data = await this.readTable(tableName);
      this.nextIds[tableName] = data.length > 0 ? Math.max(...data.map(item => item.id || 0)) + 1 : 1;
    }
    return this.nextIds[tableName]++;
  }

  // SELECT –æ–ø–µ—Ä–∞—Ü–∏–∏
  async select(tableName, conditions = {}, options = {}) {
    const data = await this.readTable(tableName);
    let result = [...data];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (Object.keys(conditions).length > 0) {
      result = result.filter(item => {
        return Object.entries(conditions).every(([key, value]) => {
          if (Array.isArray(value)) {
            return value.includes(item[key]);
          }
          return item[key] === value;
        });
      });
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if (options.orderBy) {
      const [field, direction = 'ASC'] = options.orderBy.split(' ');
      result.sort((a, b) => {
        const aVal = a[field];
        const bVal = b[field];
        const comparison = aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
        return direction === 'DESC' ? -comparison : comparison;
      });
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ñ—Ñ—Å–µ—Ç
    if (options.limit) {
      const offset = options.offset || 0;
      result = result.slice(offset, offset + options.limit);
    }

    return result;
  }

  // INSERT –æ–ø–µ—Ä–∞—Ü–∏–∏
  async insert(tableName, data) {
    const tableData = await this.readTable(tableName);
    const newItem = {
      id: await this.getNextId(tableName),
      ...data,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    tableData.push(newItem);
    await this.writeTable(tableName, tableData);
    return newItem;
  }

  // UPDATE –æ–ø–µ—Ä–∞—Ü–∏–∏
  async update(tableName, conditions, updateData) {
    const tableData = await this.readTable(tableName);
    let updatedCount = 0;
    
    const updatedData = tableData.map(item => {
      const matches = Object.entries(conditions).every(([key, value]) => item[key] === value);
      if (matches) {
        updatedCount++;
        return {
          ...item,
          ...updateData,
          updated_at: new Date().toISOString()
        };
      }
      return item;
    });
    
    await this.writeTable(tableName, updatedData);
    return updatedCount;
  }

  // DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏
  async delete(tableName, conditions) {
    const tableData = await this.readTable(tableName);
    const filteredData = tableData.filter(item => {
      return !Object.entries(conditions).every(([key, value]) => item[key] === value);
    });
    
    const deletedCount = tableData.length - filteredData.length;
    await this.writeTable(tableName, filteredData);
    return deletedCount;
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
  async query(sql, params = []) {
    // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    console.log('SQL Query (converted to JSON operations):', sql);
    console.log('Params:', params);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    return [[]];
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new JsonDatabase();

// –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MySQL –∫–æ–¥–æ–º
const pool = {
  query: async (sql, params = []) => {
    return await db.query(sql, params);
  }
};

const testConnection = async () => {
  try {
    console.log('‚úÖ JSON Database connected successfully');
    console.log('üìç Database location:', DB_PATH);
    return true;
  } catch (error) {
    console.error('‚ùå JSON Database connection failed:', error);
    throw error;
  }
};

module.exports = {
  db,
  pool,
  testConnection,
  initializeDatabase,
  JsonDatabase
}; 